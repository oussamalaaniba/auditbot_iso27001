# core/analysis.py
import pandas as pd
import os
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime, timedelta

# Charger la cl√© API
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def analyse_responses(responses, nom_client=""):
    """
    Transforme les r√©ponses en Gap Analysis enrichie (avec nom du client).
    """
    gap_analysis = []

    for domain, questions in responses.items():
        for question, answer_data in questions.items():

            if isinstance(answer_data, dict):
                answer = answer_data.get("R√©ponse", "")
                status = answer_data.get("Statut", "")
                reco = answer_data.get("Recommandation", "")
                priority = answer_data.get("Priorit√©", "")
                due_date = answer_data.get("√âch√©ance", "")
            else:
                # Ancien mode (sans IA)
                answer = str(answer_data)
                status = ""
                reco = ""
                priority = ""
                due_date = ""

            # Fallback si IA n'a rien mis
            if not reco:
                reco = f"Compl√©ter et formaliser les mesures existantes pour le domaine '{domain}'."
            if not priority:
                priority = "Moyenne"
            if not due_date:
                due_date = (datetime.now() + timedelta(days=90)).strftime("%Y-%m-%d")

            gap_analysis.append({
                "Nom du client": nom_client,
                "Domaine ISO 27001": domain,
                "Question": question,
                "R√©ponse": answer,
                "Statut": status,
                "Recommandation": reco,
                "Priorit√©": priority,
                "√âch√©ance": due_date
            })

    return gap_analysis


def evaluate_answer(answer, question="", domain=""):
    """
    √âvalue la conformit√© de la r√©ponse via l'IA selon ISO 27001.
    """
    if not answer or str(answer).strip() == "":
        return "‚ùå Non conforme"  # Fallback si vide

    prompt = f"""
    Tu es un auditeur ISO 27001 exp√©riment√©.
    La question d'audit √©tait : "{question}"
    Domaine ISO : {domain}
    R√©ponse fournie : "{answer}"

    √âvalue la conformit√© selon ISO 27001 :
    - ‚úÖ Conforme : si la r√©ponse d√©montre clairement que les exigences sont respect√©es
    - ‚ö†Ô∏è Partiellement conforme : si la r√©ponse montre un d√©but de mise en ≈ìuvre mais incomplet
    - ‚ùå Non conforme : si la r√©ponse est insuffisante ou hors sujet

    Retourne uniquement le statut : ‚úÖ Conforme, ‚ö†Ô∏è Partiellement conforme ou ‚ùå Non conforme.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        status = response.choices[0].message.content.strip()
        if status not in ["‚úÖ Conforme", "‚ö†Ô∏è Partiellement conforme", "‚ùå Non conforme"]:
            return "‚ö†Ô∏è Partiellement conforme"  # S√©curit√©
        return status
    except Exception as e:
        print(f"Erreur IA √©valuation : {e}")
        return "‚ö†Ô∏è Partiellement conforme"  # Fallback


def generate_recommendation(status, domain):
    """
    G√©n√®re une recommandation en fonction du statut.
    """
    if status == "‚ùå Non conforme":
        return f"Mettre en place des mesures conformes au domaine '{domain}'."
    elif status == "‚ö†Ô∏è Partiellement conforme":
        return f"Compl√©ter et formaliser les mesures existantes pour le domaine '{domain}'."
    else:
        return "Maintenir les bonnes pratiques en place."


def save_gap_analysis(gap_analysis, filename="data/output/gap_analysis.xlsx", nom_client=""):
    """
    Sauvegarde la Gap Analysis dans un fichier Excel (avec nom client).
    """
    df = pd.DataFrame(gap_analysis)
    if nom_client and "Nom du client" not in df.columns:
        df["Nom du client"] = nom_client
    df.to_excel(filename, index=False)
    print(f"\nüìä Gap Analysis sauvegard√©e dans : {filename}")


def generate_action_plan_from_ai(gap_analysis, default_responsable="RSSI", nom_client=""):
    """
    Transforme la Gap Analysis IA en plan d‚Äôactions avec nom client.
    """
    action_plan = []
    for entry in gap_analysis:
        if entry["Statut"] == "‚úÖ Conforme":
            continue  # Pas d‚Äôaction pour conforme

        action_plan.append({
            "Nom du client": nom_client,
            "Domaine": entry["Domaine ISO 27001"],
            "√âcart constat√©": entry["Question"],
            "Action recommand√©e": entry["Recommandation"],
            "Responsable": default_responsable,
            "Priorit√©": entry.get("Priorit√©", ""),
            "√âch√©ance": entry.get("√âch√©ance", "")
        })

    return action_plan


def save_action_plan_to_excel(action_plan, filename="data/output/action_plan.xlsx"):
    """
    Sauvegarde le plan d‚Äôactions dans un fichier Excel.
    """
    if not action_plan:
        print("‚úÖ Aucun plan d‚Äôaction √† enregistrer (tout est conforme).")
        return
    
    df = pd.DataFrame(action_plan)
    df.to_excel(filename, index=False)
    print(f"üìÖ Plan d‚Äôactions sauvegard√© dans : {filename}")
